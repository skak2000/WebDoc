@model Model.DocTemplate

@{
    ViewBag.Title = "Create template";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



@using (Html.BeginForm("CreateTemplate", "Home", FormMethod.Post, new { encType = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Create template</h4>

        <b style="padding-top:50px">Upload a word templade. It is the words "[word1]" that will be replaced with the desired values.</b>
        <p style="padding-top:20px">@Html.ActionLink("Get example", "GetTemplate", null, new { @class = "btn btn-success" })</p>

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.FileInput, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.FileInput, new { type = "file", name = "FileInput", @class = "form-control", style = "width: 100%" })
                @Html.ValidationMessageFor(model => model.FileInput, "", new { @class = "text-danger" })
            </div>
        </div>
        @Html.HiddenFor(model => model.DocTemplateId)
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Upload" class="btn btn-success" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Template list", "Index", null, new { @class = "btn btn-success" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
